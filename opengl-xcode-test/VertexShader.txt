#version 330 core

// We use a vec3 because our vertex has three coordinates. The location = 0 must match with the first
// parameter of glVertexAttributePointer. This is a way of passing different aspects of a vertex (?) into
// a shader for use. vertexPosition_modelspace is just the name this argument takes within the shader.

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 MY_MATRIX;

void main()
{
    gl_Position = MY_MATRIX * vec4(vertexPosition_modelspace, 1);

    // UV of the vertex. No special space for this one.
    UV = vertexUV;
}